
Import mojo

Function SetVirtualDisplay(width%=640,height%=480)
	New VirtualDisplay(width, height)
End

Function UpdateVirtualDisplay(zoomborders? = True, keepborders? = True)
	VirtualDisplay.Display.UpdateVirtualDisplay zoomborders, keepborders
End

Class VirtualDisplay

	Global Display:VirtualDisplay
	
	Method New(width%,height%)

		' Set virtual width and height...
		vwidth = width
		vheight = height
		
		' Store ratio...
		vratio = vheight/vwidth

		' Create global VirtualDisplay object...
		Display = Self
	
	End

	Method UpdateVirtualDisplay:void(zoomborders?,keepborders?)

		' Check for 'real' device resolution change...
		If (DeviceWidth() <> lastdevicewidth) Or (DeviceHeight() <> lastdeviceheight)
			lastdevicewidth = DeviceWidth()
			lastdeviceheight = DeviceHeight()
			device_changed = True
		Endif
		
		' Force re-calc if so (same for first call)...
		If device_changed

			' Store device resolution as float values to avoid loads of casts. Doing it here as
			' device resolution may potentially be changed on the fly on some platforms...
			fdw = DeviceWidth()
			fdh = DeviceHeight()
			
			' Device ratio is calculated on the fly since it can change (eg. resizeable browser window)...
			dratio = fdh/fdw

			' Compare to pre-calculated virtual device ratio...
			If dratio > vratio

				' Multiplier required to scale game width to device width (to be applied to height)...
				multi = Floor(fdw/vwidth)

				' "vheight * multi" below applies width multiplier to height...
				heightborder = (fdh - vheight * multi) * 0.5
				widthborder = 0
				
			Else

				' Multiplier required to scale game height to device height (to be applied to width)...
				multi = Floor(fdh / vheight)

				' "vwidth * multi" below applies height multiplier to width...
				widthborder = (fdw - vwidth * multi) * 0.5
				heightborder = 0
	
			Endif

			' Space in pixels between real device borders and virtual device borders...
			Local offx# = (fdw - (vwidth * multi)) * 0.5
			Local offy# = (fdh - (vheight * multi)) * 0.5
	
			' Calculate inner area...
			If offx < widthborder
				sx = widthborder
				sw = fdw - widthborder * 2.0
			Else
				sx = offx
				sw = fdw - (offx * 2.0)
			Endif
	
			If offy < heightborder
				sy = heightborder
				sh = fdh - heightborder * 2.0
			Else
				sy = offy
				sh = fdh - (offy * 2.0)
			Endif
	
			' Apply limits...
			sx = Max(0.0, sx)
			sy = Max(0.0, sy)
			sw = Min(sw, fdw)
			sh = Min(sh, fdh)

			' Find offsets by which view needs to be shifted...
			vxoff = (fdw - (vwidth * multi)) * 0.5
			vyoff = (fdh - (vheight * multi)) * 0.5

			' Ahh, good old trial and error -- I have no idea how this works!
			vxoff /= multi'vxoff = vxoff / multi
			vyoff /= multi'vyoff = vyoff / multi
		
			' Reset these...
			device_changed = False
			
		Endif
		
		' Draw borders at full device size...
		SetScissor(0,0,DeviceWidth(),DeviceHeight())
		Cls(0,0,0)

		' Draw inner area...
		SetScissor(sx,sy,sw,sh)
			
		' Scale everything...
		Scale(multi,multi)

		' Shift display to account for borders/zoom level...
		Translate(vxoff,vyoff)

	End

Private
	
	' Virtual width/height
	Field vwidth#,vheight#
	Field device_changed?				' Device size changed
	Field lastdevicewidth%				' For device change detection
	Field lastdeviceheight%				' For device change detection
	Field vratio#					' Virtual ratio
	Field dratio#					' Device ratio
	Field widthborder#				' Size of border at sides
	Field heightborder#				' Size of border at top/bottom
	Field sx#,sy#,sw#,sh#	' Scissor area
	Field vxoff#,vyoff#' Offsets by which view needs to be shifted
	Field multi#
	Field fdw#,fdh#
	
End
